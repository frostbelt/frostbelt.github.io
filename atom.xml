<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>frostbelt&#39;s home</title>
  
  <subtitle>想学更多有意思的东西，想做自己的网站，想学画画</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://frostbelt.github.io/"/>
  <updated>2019-10-31T11:49:36.191Z</updated>
  <id>https://frostbelt.github.io/</id>
  
  <author>
    <name>frostbelt</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>fiddler 内置命令</title>
    <link href="https://frostbelt.github.io/2019/10/31/fiddler-%E5%86%85%E7%BD%AE%E5%91%BD%E4%BB%A4/"/>
    <id>https://frostbelt.github.io/2019/10/31/fiddler-内置命令/</id>
    <published>2019-10-31T11:14:09.000Z</published>
    <updated>2019-10-31T11:49:36.191Z</updated>
    
    <content type="html"><![CDATA[<p>引自<a href="https://www.cnblogs.com/nihaorz/p/5455148.html" target="_blank" rel="noopener">Fiddler内置命令</a></p><h3 id=""><a href="#" class="headerlink" title="?"></a>?</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?google.com</span><br><span class="line">高亮显示所有 url 中包含 google.com 的请求</span><br></pre></td></tr></table></figure><h3 id="gt-和-lt"><a href="#gt-和-lt" class="headerlink" title="&gt; 和 &lt;"></a>&gt; 和 &lt;</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;5000</span><br><span class="line">高亮显示所有包 &gt;5000 bytes 的请求</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="-1"><a href="#-1" class="headerlink" title="="></a>=</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">=200 </span><br><span class="line">高亮显示所有状态码为 200 的请求</span><br><span class="line">=post </span><br><span class="line">高亮显示所有 post 请求</span><br></pre></td></tr></table></figure><h3 id="-2"><a href="#-2" class="headerlink" title="@"></a>@</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@frostbelt.cn</span><br><span class="line">高亮显示所有 frostbelt.cn 域下或子域下的请求</span><br></pre></td></tr></table></figure><h3 id="bpafter"><a href="#bpafter" class="headerlink" title="bpafter"></a>bpafter</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">bpafter xxx</span><br><span class="line">中断所有匹配到的请求，可以修改 response 后继续</span><br><span class="line">bpafter 解除中断</span><br></pre></td></tr></table></figure><h3 id="bps"><a href="#bps" class="headerlink" title="bps"></a>bps</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">bps 200</span><br><span class="line">中断所有状态码为 200 的请求</span><br><span class="line">bps 解除中断</span><br></pre></td></tr></table></figure><h3 id="bpv-bpm"><a href="#bpv-bpm" class="headerlink" title="bpv / bpm"></a>bpv / bpm</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">bpv get</span><br><span class="line">中断所有 get 请求</span><br><span class="line">bpv 解除中断</span><br></pre></td></tr></table></figure><h3 id="bpu"><a href="#bpu" class="headerlink" title="bpu"></a>bpu</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">跟 bpafter 类似，区别：bpu 是在发起请求时中断，而 bpafter 是在收到响应后中断。</span><br></pre></td></tr></table></figure><h3 id="g-go"><a href="#g-go" class="headerlink" title="g / go"></a>g / go</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">放行所有中断下来的会话。</span><br></pre></td></tr></table></figure><h3 id="cls-clear"><a href="#cls-clear" class="headerlink" title="cls / clear"></a>cls / clear</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">清除当前的所有请求</span><br></pre></td></tr></table></figure><h3 id="dump"><a href="#dump" class="headerlink" title="dump"></a>dump</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">将所有请求打包成saz压缩包，保存到“我的文档\Fiddler2\Captures”目录下</span><br></pre></td></tr></table></figure><h3 id="urlreplace"><a href="#urlreplace" class="headerlink" title="urlreplace"></a>urlreplace</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">urlreplace baidu.com google.com</span><br><span class="line">将所有 url 中的 baidu.com 替换成 google.com</span><br><span class="line">urlreplace 解除替换</span><br></pre></td></tr></table></figure><h3 id="select"><a href="#select" class="headerlink" title="select"></a>select</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select image/css/html</span><br><span class="line">选中所有的图片/css/html</span><br></pre></td></tr></table></figure><h3 id="allbut-keeponly"><a href="#allbut-keeponly" class="headerlink" title="allbut / keeponly"></a>allbut / keeponly</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">keeponly image</span><br><span class="line">将所有与图片无关的请求删除</span><br><span class="line">跟 select 类似，不过 allbut 和 keeponly 会将所有无关的会话删除。</span><br></pre></td></tr></table></figure><h3 id="start-或-stop"><a href="#start-或-stop" class="headerlink" title="start 或 stop"></a>start 或 stop</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">开始监听请求 或 停止监听请求</span><br></pre></td></tr></table></figure><h3 id="bold"><a href="#bold" class="headerlink" title="bold"></a>bold</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">bold google.com</span><br><span class="line">加粗显示所有 url 中有 google.com 的请求</span><br><span class="line">bold 取消加粗</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;引自&lt;a href=&quot;https://www.cnblogs.com/nihaorz/p/5455148.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Fiddler内置命令&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;?&quot;&gt;&lt;/a&gt;?&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;?google.com&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;高亮显示所有 url 中包含 google.com 的请求&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;gt-和-lt&quot;&gt;&lt;a href=&quot;#gt-和-lt&quot; class=&quot;headerlink&quot; title=&quot;&amp;gt; 和 &amp;lt;&quot;&gt;&lt;/a&gt;&amp;gt; 和 &amp;lt;&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;5000&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;高亮显示所有包 &amp;gt;5000 bytes 的请求&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="fiddler" scheme="https://frostbelt.github.io/tags/fiddler/"/>
    
  </entry>
  
  <entry>
    <title>laya js bridge</title>
    <link href="https://frostbelt.github.io/2019/10/21/laya-js-bridge/"/>
    <id>https://frostbelt.github.io/2019/10/21/laya-js-bridge/</id>
    <published>2019-10-21T02:20:40.000Z</published>
    <updated>2019-10-21T02:36:43.951Z</updated>
    
    <content type="html"><![CDATA[<h3 id="laya-文档"><a href="#laya-文档" class="headerlink" title="laya 文档"></a>laya 文档</h3><p><a href="https://ldc.layabox.com/doc/?nav=zh-js-7-2-3" target="_blank" rel="noopener">用反射机制实现二次开发</a></p><h3 id="注"><a href="#注" class="headerlink" title="注"></a>注</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">laya 的异步调用，内部并没有实现队列。如连续多次调用同一异步方法，回调函数会被覆盖，导致逻辑混乱。</span><br><span class="line">即异步调用需要串行调用</span><br><span class="line">方案: 所有接口使用同步方式调用，指定回调方法，客户端直接回调，类似 jsonp</span><br></pre></td></tr></table></figure><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">const os = conchConfig.getOS();</span><br><span class="line"></span><br><span class="line">let GameClient = &#123;</span><br><span class="line">  is_android : os == &quot;Conch-android&quot;,</span><br><span class="line">  is_ios_jj : os == &quot;Conch-ios&quot;,</span><br><span class="line">  bridge : os == &quot;Conch-android&quot; ? PlatformClass.createClass(&quot;com.xxx.xxx.xxx.JSBridge&quot;) : PlatformClass.createClass(&quot;JSBridge&quot;),</span><br><span class="line"></span><br><span class="line">  data : &#123;&#125;,</span><br><span class="line"></span><br><span class="line">  /**</span><br><span class="line">   * toast (同步方法示例)</span><br><span class="line">   * @param &#123;String&#125; msg </span><br><span class="line">   */</span><br><span class="line">  alert (msg) &#123;</span><br><span class="line">    this.bridge.call(&quot;showMessage&quot;, msg);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  /**</span><br><span class="line">   * 获取用户信息 (异步方法示例)</span><br><span class="line">   * @param &#123;Function&#125; cb 回调</span><br><span class="line">   * @param &#123;Boolean&#125; force_update 强制取最新信息</span><br><span class="line">   * @example </span><br><span class="line">   *    GameClient.getUserInfo(res =&gt; &#123;</span><br><span class="line">   *      // 已登录</span><br><span class="line">   *      if(res.errno == 1)&#123;</span><br><span class="line">   *        res.data = &#123;</span><br><span class="line">   *          name : &quot;xxx&quot;,</span><br><span class="line">   *          avatar : &quot;xxx&quot;,</span><br><span class="line">   *        &#125;;</span><br><span class="line">   *      &#125;</span><br><span class="line">   *    &#125;);</span><br><span class="line">   */</span><br><span class="line">  getUserInfo (cb, force_update) &#123;</span><br><span class="line">    cb = cb || function()&#123;&#125;;</span><br><span class="line"></span><br><span class="line">    // 已记录登录状态</span><br><span class="line">    if(this.data.userInfo &amp;&amp; !force_update)&#123;</span><br><span class="line">      cb(this.data.userInfo);</span><br><span class="line">      return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    this.bridge.callWithBack(res =&gt; &#123;</span><br><span class="line">      res = typeof res == &quot;string&quot; ? JSON.parse(res) : res;</span><br><span class="line">      if(res.errno == 1)&#123;</span><br><span class="line">        this.data.userInfo = res.data;</span><br><span class="line">      &#125;</span><br><span class="line">      else &#123;</span><br><span class="line">        this.data.userInfo = null;</span><br><span class="line">      &#125;</span><br><span class="line">      cb(this.data.userInfo);</span><br><span class="line">    &#125;, &quot;getCurrentUserInfo&quot;);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">export default GameClient;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;laya-文档&quot;&gt;&lt;a href=&quot;#laya-文档&quot; class=&quot;headerlink&quot; title=&quot;laya 文档&quot;&gt;&lt;/a&gt;laya 文档&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://ldc.layabox.com/doc/?nav=zh-js-7-
      
    
    </summary>
    
    
      <category term="laya" scheme="https://frostbelt.github.io/tags/laya/"/>
    
  </entry>
  
  <entry>
    <title>fiddler显示IP</title>
    <link href="https://frostbelt.github.io/2019/10/19/fiddler%E6%98%BE%E7%A4%BAIP/"/>
    <id>https://frostbelt.github.io/2019/10/19/fiddler显示IP/</id>
    <published>2019-10-19T10:39:42.000Z</published>
    <updated>2019-10-19T10:41:01.145Z</updated>
    
    <content type="html"><![CDATA[<p>Rules-&gt;Customize Rules…</p><p>在 static function Main() 中加一行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FiddlerObject.UI.lvSessions.AddBoundColumn(&quot;ServerIP&quot;,120,&quot;X-HostIP&quot;);</span><br></pre></td></tr></table></figure></p><p>后加在左侧的最后一栏，把它拖动到前面</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Rules-&amp;gt;Customize Rules…&lt;/p&gt;
&lt;p&gt;在 static function Main() 中加一行&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;sp
      
    
    </summary>
    
    
      <category term="fiddler" scheme="https://frostbelt.github.io/tags/fiddler/"/>
    
  </entry>
  
  <entry>
    <title>fiddler抓包--websocket</title>
    <link href="https://frostbelt.github.io/2019/10/19/fiddler%E6%8A%93%E5%8C%85-websocket/"/>
    <id>https://frostbelt.github.io/2019/10/19/fiddler抓包-websocket/</id>
    <published>2019-10-19T10:31:31.000Z</published>
    <updated>2019-10-19T10:38:10.279Z</updated>
    
    <content type="html"><![CDATA[<p>Rules-&gt;Customize Rules…</p><p>在 class Handlers 中加入以下代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">static function OnWebSocketMessage(oMsg:WebSocketMessage)&#123;</span><br><span class="line">  FiddlerApplication.Log.LogString(oMsg.ToString());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>然后就可以在右侧的 <code>log</code> tab 下看到 websocket 的消息了</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Rules-&amp;gt;Customize Rules…&lt;/p&gt;
&lt;p&gt;在 class Handlers 中加入以下代码&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span cl
      
    
    </summary>
    
    
      <category term="fiddler" scheme="https://frostbelt.github.io/tags/fiddler/"/>
    
      <category term="websocket" scheme="https://frostbelt.github.io/tags/websocket/"/>
    
  </entry>
  
  <entry>
    <title>Laya 命令行编译(Mac)</title>
    <link href="https://frostbelt.github.io/2019/10/17/Laya-%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%BC%96%E8%AF%91-Mac/"/>
    <id>https://frostbelt.github.io/2019/10/17/Laya-命令行编译-Mac/</id>
    <published>2019-10-17T06:54:58.000Z</published>
    <updated>2019-10-17T07:08:16.681Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>总感觉 Laya 是一款对 Mac 很不友好的游戏引擎，一开 Layaair IDE 风扇就不停。IDE 的关闭、最大最小化还是在右上角，是在 Windows exe 上套了个壳吗？想在命令行编译，尝试了官方的 layaair2-cmd 还报错…</p></blockquote><p>后来，终于找到一个能在 Mac 上运行的命令行编译工具<a href="https://github.com/Cola-Zhang/layaair2-cmd-plus" target="_blank" rel="noopener">layaair2-cmd-plus</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;总感觉 Laya 是一款对 Mac 很不友好的游戏引擎，一开 Layaair IDE 风扇就不停。IDE 的关闭、最大最小化还是在右上角，是在 Windows exe 上套了个壳吗？想在命令行编译，尝试了官方的 layaair2-cmd 还报错…&lt;
      
    
    </summary>
    
    
      <category term="laya" scheme="https://frostbelt.github.io/tags/laya/"/>
    
  </entry>
  
  <entry>
    <title>npm uninstall -g</title>
    <link href="https://frostbelt.github.io/2019/10/17/npm-uninstall-g/"/>
    <id>https://frostbelt.github.io/2019/10/17/npm-uninstall-g/</id>
    <published>2019-10-17T06:47:43.000Z</published>
    <updated>2019-10-17T06:54:28.530Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">全局安装是:</span><br><span class="line">$ npm install xxx -g</span><br><span class="line">全局卸载是:</span><br><span class="line">$ npm uninstall xxx -g</span><br><span class="line">全局卸载后，查看全局安装的包:</span><br><span class="line">$ npm list --depth=0 -global</span><br><span class="line">发现还有残留，还有大量报错信息</span><br></pre></td></tr></table></figure><h3 id="解决方式"><a href="#解决方式" class="headerlink" title="解决方式"></a>解决方式</h3><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">查看 npm 配置:</span><br><span class="line">$ npm config list</span><br><span class="line">; cli configs</span><br><span class="line">metrics-registry = &quot;https://registry.npmjs.org/&quot;</span><br><span class="line">scope = &quot;&quot;</span><br><span class="line">user-agent = &quot;npm/6.1.0 node/v10.6.0 darwin x64&quot;</span><br><span class="line"></span><br><span class="line">; node bin location = /youpath/node/v10.6.0/bin/node</span><br><span class="line">; cwd = /youpath/node/v10.6.0/lib/node_modules</span><br><span class="line">; HOME = /xxx</span><br><span class="line">; &quot;npm config ls -l&quot; to show all defaults.</span><br><span class="line">然后到 /youpath/node/v10.6.0/lib/node_modules 下 rm -rf 掉你想删掉的包</span><br><span class="line">再次 npm list --depth=0 -global 后正常</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;全局安装是:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ npm install xxx -g&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;全局卸载是:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ npm uninstall xxx -g&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;全局卸载后，查看全局安装的包:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ npm list --depth=0 -global&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;发现还有残留，还有大量报错信息&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;解决方式&quot;&gt;&lt;a href=&quot;#解决方式&quot; class=&quot;headerlink&quot; title=&quot;解决方式&quot;&gt;&lt;/a&gt;解决方式&lt;/h3&gt;
    
    </summary>
    
    
      <category term="npm" scheme="https://frostbelt.github.io/tags/npm/"/>
    
  </entry>
  
  <entry>
    <title>阿里云ECS开启websocket</title>
    <link href="https://frostbelt.github.io/2019/09/12/%E9%98%BF%E9%87%8C%E4%BA%91ECS%E5%BC%80%E5%90%AFwebsocket/"/>
    <id>https://frostbelt.github.io/2019/09/12/阿里云ECS开启websocket/</id>
    <published>2019-09-12T02:14:59.000Z</published>
    <updated>2019-09-12T02:46:17.229Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本地测试没问题，但放到阿云 ECS 上后 websocket 无法链接</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1. 安全组放行 websocket 服务端口</span><br><span class="line">2. 开启防火墙并设置端口开放</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="安全组放行-websocket-服务端口"><a href="#安全组放行-websocket-服务端口" class="headerlink" title="安全组放行 websocket 服务端口"></a>安全组放行 websocket 服务端口</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">注: 每个 ECS 实例会有一个默认的安全组，这个安全组并不会显示在&quot;网络和安全-&gt;安全组&quot;列表中</span><br><span class="line">控制台-&gt;云服务器 ECS-&gt;实例-&gt;右键&quot;更多&quot;-&gt;网络和安全组-&gt;安全组配置-&gt;配置规则</span><br><span class="line">网卡类型: 内网</span><br><span class="line">规则方向: 入方向</span><br><span class="line">授权策略: 允许</span><br><span class="line">协议类型: 自定义TCP</span><br><span class="line">端口范围: 8000/8000 (websocket 使用的端口)</span><br><span class="line">优先级: 1</span><br><span class="line">授权类型: IPv4地址段访问</span><br><span class="line">授权对象: 0.0.0.0/0</span><br></pre></td></tr></table></figure><h3 id="开启防火墙并设置端口开放"><a href="#开启防火墙并设置端口开放" class="headerlink" title="开启防火墙并设置端口开放"></a>开启防火墙并设置端口开放</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 开启防火墙</span><br><span class="line">$ systemctl start firewalld</span><br><span class="line"># 设置打开的端口号（永久打开）</span><br><span class="line">$ firewall-cmd --add-port=8000/tcp --permanent</span><br><span class="line"># 更新防火墙配置</span><br><span class="line">$ firewall-cmd --reload</span><br><span class="line"># 查看已经打开的端口</span><br><span class="line">$ firewall-cmd --list-all</span><br><span class="line">注: 需要把之前的 80、443 等对外端口都开一下，以免影响业务</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本地测试没问题，但放到阿云 ECS 上后 websocket 无法链接&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1. 安全组放行 websocket 服务端口&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2. 开启防火墙并设置端口开放&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="websocket" scheme="https://frostbelt.github.io/tags/websocket/"/>
    
      <category term="ecs" scheme="https://frostbelt.github.io/tags/ecs/"/>
    
  </entry>
  
  <entry>
    <title>断开ssh后继续执行--nohup</title>
    <link href="https://frostbelt.github.io/2019/09/12/%E6%96%AD%E5%BC%80ssh%E5%90%8E%E7%BB%A7%E7%BB%AD%E6%89%A7%E8%A1%8C-nohup/"/>
    <id>https://frostbelt.github.io/2019/09/12/断开ssh后继续执行-nohup/</id>
    <published>2019-09-12T01:56:32.000Z</published>
    <updated>2019-09-12T02:46:27.426Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">场景: ssh 连接开发机后启动服务，ssh 断开后服务不停</span><br><span class="line">$ nohup npm start &gt; /var/log/nginx/xxx.log 2&gt;&amp;1 &amp;</span><br><span class="line">运行 npm start 命令，并且 ssh 断开后继续执行。日志输出到 /var/log/nginx/xxx.log</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="详情"><a href="#详情" class="headerlink" title="详情"></a>详情</h3><h4 id="nohup"><a href="#nohup" class="headerlink" title="nohup"></a>nohup</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">用途: 不挂断地运行命令。</span><br><span class="line">语法: nohup command [ Arg … ] [　&amp; ]</span><br></pre></td></tr></table></figure><h4 id="amp"><a href="#amp" class="headerlink" title="&amp;"></a>&amp;</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">用途: 在后台运行</span><br><span class="line">一般两个一起用: nohup command &amp;</span><br></pre></td></tr></table></figure><h4 id="输出控制台日志到文件"><a href="#输出控制台日志到文件" class="headerlink" title="输出控制台日志到文件"></a>输出控制台日志到文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; /var/log/nginx/xxx.log 2&gt;&amp;1</span><br></pre></td></tr></table></figure><h3 id="如何查看后台运行的命令？"><a href="#如何查看后台运行的命令？" class="headerlink" title="如何查看后台运行的命令？"></a>如何查看后台运行的命令？</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">以上 npm start 其实是运行了一条命令 node app.js</span><br><span class="line">$ ps -aux|grep node</span><br><span class="line">frostbe+ 15717  0.0  3.0 661548 30884 pts/0    SNl  09:52   0:00 node app.js</span><br><span class="line">进程号为 15717</span><br></pre></td></tr></table></figure><h3 id="重启进程"><a href="#重启进程" class="headerlink" title="重启进程"></a>重启进程</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kill -usr2 15717</span><br></pre></td></tr></table></figure><h3 id="杀掉进程"><a href="#杀掉进程" class="headerlink" title="杀掉进程"></a>杀掉进程</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kill -INT 15717</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;场景: ssh 连接开发机后启动服务，ssh 断开后服务不停&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ nohup npm start &amp;gt; /var/log/nginx/xxx.log 2&amp;gt;&amp;amp;1 &amp;amp;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;运行 npm start 命令，并且 ssh 断开后继续执行。日志输出到 /var/log/nginx/xxx.log&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="linux" scheme="https://frostbelt.github.io/tags/linux/"/>
    
      <category term="ssh" scheme="https://frostbelt.github.io/tags/ssh/"/>
    
  </entry>
  
  <entry>
    <title>php 执行命令</title>
    <link href="https://frostbelt.github.io/2019/08/12/php-%E6%89%A7%E8%A1%8C%E5%91%BD%E4%BB%A4/"/>
    <id>https://frostbelt.github.io/2019/08/12/php-执行命令/</id>
    <published>2019-08-12T03:13:37.000Z</published>
    <updated>2019-08-12T03:15:19.774Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">exec ( string $command [, array &amp;$output [, int &amp;$return_var ]] ) : string</span><br><span class="line">例:</span><br><span class="line">exec(&apos;curl --user api:TinyPNG密钥 --data-binary @xxx.png照片绝对路径 -i https://api.tinify.com/shrink&apos;, $res);</span><br><span class="line">$res = $res[count($res) - 1];</span><br><span class="line">$res = json_decode($res, true);</span><br><span class="line">$this-&gt;outFormat(0, $res[&apos;output&apos;]);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class
      
    
    </summary>
    
    
      <category term="php" scheme="https://frostbelt.github.io/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>解决 iOS input 点击时黑一下的问题</title>
    <link href="https://frostbelt.github.io/2019/07/29/%E8%A7%A3%E5%86%B3-iOS-input-%E7%82%B9%E5%87%BB%E6%97%B6%E9%BB%91%E4%B8%80%E4%B8%8B%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>https://frostbelt.github.io/2019/07/29/解决-iOS-input-点击时黑一下的问题/</id>
    <published>2019-07-29T03:47:22.000Z</published>
    <updated>2019-07-29T03:48:12.335Z</updated>
    
    <content type="html"><![CDATA[<p>解决 iOS input 点击时黑一下的问题<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">input, textarea &#123;</span><br><span class="line">  -webkit-tap-highlight-color:rgba(0,0,0,0);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;解决 iOS input 点击时黑一下的问题&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;
      
    
    </summary>
    
    
      <category term="css" scheme="https://frostbelt.github.io/tags/css/"/>
    
      <category term="ios" scheme="https://frostbelt.github.io/tags/ios/"/>
    
  </entry>
  
  <entry>
    <title>微信reload</title>
    <link href="https://frostbelt.github.io/2019/07/26/%E5%BE%AE%E4%BF%A1reload/"/>
    <id>https://frostbelt.github.io/2019/07/26/微信reload/</id>
    <published>2019-07-26T02:14:01.000Z</published>
    <updated>2019-07-26T02:14:59.485Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">微信中 location.reload() 无效</span><br><span class="line">可以使用 location.href 或 replace 加随机数刷新</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;
      
    
    </summary>
    
    
      <category term="微信" scheme="https://frostbelt.github.io/tags/%E5%BE%AE%E4%BF%A1/"/>
    
  </entry>
  
  <entry>
    <title>解决mpvue多个页面共用一个vm对象的问题</title>
    <link href="https://frostbelt.github.io/2019/07/03/%E8%A7%A3%E5%86%B3mpvue%E5%A4%9A%E4%B8%AA%E9%A1%B5%E9%9D%A2%E5%85%B1%E7%94%A8%E4%B8%80%E4%B8%AAvm%E5%AF%B9%E8%B1%A1%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>https://frostbelt.github.io/2019/07/03/解决mpvue多个页面共用一个vm对象的问题/</id>
    <published>2019-07-03T10:26:07.000Z</published>
    <updated>2019-07-03T10:26:37.021Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/HelloZJW/mpvue-page-factory" target="_blank" rel="noopener">https://github.com/HelloZJW/mpvue-page-factory</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://github.com/HelloZJW/mpvue-page-factory&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/HelloZJW/mpvue-page-factory&lt;/a
      
    
    </summary>
    
    
      <category term="小程序" scheme="https://frostbelt.github.io/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
      <category term="mpvue" scheme="https://frostbelt.github.io/tags/mpvue/"/>
    
  </entry>
  
  <entry>
    <title>小程序自定义导航</title>
    <link href="https://frostbelt.github.io/2019/07/03/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E8%87%AA%E5%AE%9A%E4%B9%89%E5%AF%BC%E8%88%AA/"/>
    <id>https://frostbelt.github.io/2019/07/03/小程序自定义导航/</id>
    <published>2019-07-03T10:20:52.000Z</published>
    <updated>2019-07-03T10:24:09.608Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>如何实现小红书小程序左上角那样的返回按钮？</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">在 app.json 中设置 window.navigationStyle 为 &quot;custom&quot;</span><br><span class="line">可以隐藏小程序头部导航条(保留右上角胶囊)</span><br><span class="line">然后在页面上自己实现一个 fixed head 即可</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;如何实现小红书小程序左上角那样的返回按钮？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line
      
    
    </summary>
    
    
      <category term="小程序" scheme="https://frostbelt.github.io/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>小程序请求payload问题解决</title>
    <link href="https://frostbelt.github.io/2019/06/13/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E8%AF%B7%E6%B1%82payload%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"/>
    <id>https://frostbelt.github.io/2019/06/13/小程序请求payload问题解决/</id>
    <published>2019-06-13T08:55:52.000Z</published>
    <updated>2019-06-13T08:58:53.286Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>小程序 post 请求默认为 request payload 方式，导致服务端拿不到参数</p></blockquote><h6 id="解决方式"><a href="#解决方式" class="headerlink" title="解决方式"></a>解决方式</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">增加 header content-type</span><br><span class="line"></span><br><span class="line">wx.request(&#123;</span><br><span class="line">  url: &apos;xxx&apos;,</span><br><span class="line">  data: &#123;&#125;,</span><br><span class="line">  method: &apos;POST&apos;,</span><br><span class="line">  header: &#123;&apos;content-type&apos;: &apos;application/x-www-form-urlencoded&apos;&#125;,</span><br><span class="line">  ...</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;小程序 post 请求默认为 request payload 方式，导致服务端拿不到参数&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h6 id=&quot;解决方式&quot;&gt;&lt;a href=&quot;#解决方式&quot; class=&quot;headerlink&quot; title=&quot;解决方式&quot;
      
    
    </summary>
    
    
      <category term="小程序" scheme="https://frostbelt.github.io/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
      <category term="post" scheme="https://frostbelt.github.io/tags/post/"/>
    
      <category term="payload" scheme="https://frostbelt.github.io/tags/payload/"/>
    
  </entry>
  
  <entry>
    <title>小程序 Android 页面滚动时渲染延迟</title>
    <link href="https://frostbelt.github.io/2019/06/11/%E5%B0%8F%E7%A8%8B%E5%BA%8F-Android-%E9%A1%B5%E9%9D%A2%E6%BB%9A%E5%8A%A8%E6%97%B6%E6%B8%B2%E6%9F%93%E5%BB%B6%E8%BF%9F/"/>
    <id>https://frostbelt.github.io/2019/06/11/小程序-Android-页面滚动时渲染延迟/</id>
    <published>2019-06-11T01:41:21.000Z</published>
    <updated>2019-06-11T01:43:52.950Z</updated>
    
    <content type="html"><![CDATA[<p>做一个 sticky 效果，在 Android 小程序中出现页面滚动时渲染延迟</p><p>原因：小程序在 Android 下，滚动会导致所有异步阻塞，包括 setInterval、setTimeout 等。</p><p>解决：在页面配置文件里（即.json文件）添加 usingComponents 字段即可解决问题。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;usingComponents&quot;: &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;做一个 sticky 效果，在 Android 小程序中出现页面滚动时渲染延迟&lt;/p&gt;
&lt;p&gt;原因：小程序在 Android 下，滚动会导致所有异步阻塞，包括 setInterval、setTimeout 等。&lt;/p&gt;
&lt;p&gt;解决：在页面配置文件里（即.json文件）添加 
      
    
    </summary>
    
    
      <category term="小程序" scheme="https://frostbelt.github.io/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
      <category term="android" scheme="https://frostbelt.github.io/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>vue axios post 请求</title>
    <link href="https://frostbelt.github.io/2019/05/20/vue-axios-post-%E8%AF%B7%E6%B1%82/"/>
    <id>https://frostbelt.github.io/2019/05/20/vue-axios-post-请求/</id>
    <published>2019-05-20T07:06:29.000Z</published>
    <updated>2019-06-13T08:56:37.900Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>vue 集成 axios 之后，发送的 post 请求默认为 payload 方式。 如果想改为正常的方式，需要将发送的数据修改为 form data 的方式。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">cnpm install qs</span><br><span class="line">import Qs from &apos;qs&apos;</span><br><span class="line">将 post 请求发送的 params 替换为 Qs.stringify(params)</span><br><span class="line">可以统一写到 axios.js 里:</span><br><span class="line">axios.interceptors.request.use(</span><br><span class="line">  config =&gt; &#123;</span><br><span class="line">    // post data Object -&gt; form data</span><br><span class="line">    if(config.method == &quot;post&quot; &amp;&amp; config.data)&#123;</span><br><span class="line">      config.data = Qs.stringify(config.data);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    return config</span><br><span class="line">  &#125;,</span><br><span class="line">  error =&gt; &#123;</span><br><span class="line">    return Promise.reject(error)</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">也可以手动转为 formData</span><br><span class="line">let formData = new FormData();</span><br><span class="line">Object.keys(params).forEach((key) =&gt; &#123;</span><br><span class="line">  formData.append(key, params[key]);</span><br><span class="line">&#125;);</span><br><span class="line">params = formData;</span><br></pre></td></tr></table></figure><h4 id="接口返回-header-问题"><a href="#接口返回-header-问题" class="headerlink" title="接口返回 header 问题"></a>接口返回 header 问题</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">如果报错 Request header field Content-Type is not allowed by Access-Control-Allow-Headers in preflight response.</span><br><span class="line">需要接口返回加 header:</span><br><span class="line">Access-Control-Allow-Headers: Content-Type</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;vue 集成 axios 之后，发送的 post 请求默认为 payload 方式。 如果想改为正常的方式，需要将发送的数据修改为 form data 的方式。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight 
      
    
    </summary>
    
    
      <category term="vue" scheme="https://frostbelt.github.io/tags/vue/"/>
    
      <category term="axios" scheme="https://frostbelt.github.io/tags/axios/"/>
    
      <category term="post" scheme="https://frostbelt.github.io/tags/post/"/>
    
      <category term="payload" scheme="https://frostbelt.github.io/tags/payload/"/>
    
  </entry>
  
  <entry>
    <title>vscode 快捷键</title>
    <link href="https://frostbelt.github.io/2019/05/17/vscode-%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    <id>https://frostbelt.github.io/2019/05/17/vscode-快捷键/</id>
    <published>2019-05-17T08:18:53.000Z</published>
    <updated>2019-08-15T06:14:47.167Z</updated>
    
    <content type="html"><![CDATA[<h5 id="在选中的每一行行尾插入光标"><a href="#在选中的每一行行尾插入光标" class="headerlink" title="在选中的每一行行尾插入光标"></a>在选中的每一行行尾插入光标</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Shift + Alt + I</span><br></pre></td></tr></table></figure><h5 id="回到上一次编辑的位置"><a href="#回到上一次编辑的位置" class="headerlink" title="回到上一次编辑的位置"></a>回到上一次编辑的位置</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Ctrl + -</span><br></pre></td></tr></table></figure><h5 id="跳到某一行"><a href="#跳到某一行" class="headerlink" title="跳到某一行"></a>跳到某一行</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Ctrl + g</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h5 id=&quot;在选中的每一行行尾插入光标&quot;&gt;&lt;a href=&quot;#在选中的每一行行尾插入光标&quot; class=&quot;headerlink&quot; title=&quot;在选中的每一行行尾插入光标&quot;&gt;&lt;/a&gt;在选中的每一行行尾插入光标&lt;/h5&gt;&lt;figure class=&quot;highlight plai
      
    
    </summary>
    
    
      <category term="vscode" scheme="https://frostbelt.github.io/tags/vscode/"/>
    
  </entry>
  
  <entry>
    <title>win10 解决 Failed to register Fiddler as the system proxy.</title>
    <link href="https://frostbelt.github.io/2019/05/16/win10-%E8%A7%A3%E5%86%B3-Failed-to-register-Fiddler-as-the-system-proxy/"/>
    <id>https://frostbelt.github.io/2019/05/16/win10-解决-Failed-to-register-Fiddler-as-the-system-proxy/</id>
    <published>2019-05-16T02:18:06.000Z</published>
    <updated>2019-05-16T02:22:10.339Z</updated>
    
    <content type="html"><![CDATA[<p>win10 安装 fiddler 后提示 “Failed to register Fiddler as the system proxy.”</p><p>需要在服务中启动 WinHTTP Web Proxy Auto-Discovery Service 服务<br>如果不能启动该服务，可能是被 360安全卫士 干掉了<br>按以下操作解除禁用:<br>360安全卫士 -&gt; 优化加速 -&gt; 启动项 -&gt; 系统关键服务 -&gt; 找到该服务并恢复启动 -&gt; 重启</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;win10 安装 fiddler 后提示 “Failed to register Fiddler as the system proxy.”&lt;/p&gt;
&lt;p&gt;需要在服务中启动 WinHTTP Web Proxy Auto-Discovery Service 服务&lt;br&gt;如果不
      
    
    </summary>
    
    
      <category term="fiddler" scheme="https://frostbelt.github.io/tags/fiddler/"/>
    
      <category term="win10" scheme="https://frostbelt.github.io/tags/win10/"/>
    
  </entry>
  
  <entry>
    <title>win10设置软件自启动</title>
    <link href="https://frostbelt.github.io/2019/05/16/win10%E8%AE%BE%E7%BD%AE%E8%BD%AF%E4%BB%B6%E8%87%AA%E5%90%AF%E5%8A%A8/"/>
    <id>https://frostbelt.github.io/2019/05/16/win10设置软件自启动/</id>
    <published>2019-05-16T02:06:36.000Z</published>
    <updated>2019-05-16T02:10:17.426Z</updated>
    
    <content type="html"><![CDATA[<h3 id="添加自启动"><a href="#添加自启动" class="headerlink" title="添加自启动"></a>添加自启动</h3><p>windows + R<br>输入: shell:startup<br>打开自启动文件夹<br>将需要自启动的软件快捷方式丢进去</p><h3 id="禁止自启动"><a href="#禁止自启动" class="headerlink" title="禁止自启动"></a>禁止自启动</h3><p>开始右面的圈圈 -&gt; 应用 -&gt; 任务管理器<br>打开“启动”tab<br>右键禁用</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;添加自启动&quot;&gt;&lt;a href=&quot;#添加自启动&quot; class=&quot;headerlink&quot; title=&quot;添加自启动&quot;&gt;&lt;/a&gt;添加自启动&lt;/h3&gt;&lt;p&gt;windows + R&lt;br&gt;输入: shell:startup&lt;br&gt;打开自启动文件夹&lt;br&gt;将需要自启动的软件快
      
    
    </summary>
    
    
      <category term="win10" scheme="https://frostbelt.github.io/tags/win10/"/>
    
  </entry>
  
  <entry>
    <title>moment 常用方法</title>
    <link href="https://frostbelt.github.io/2019/04/19/moment-%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/"/>
    <id>https://frostbelt.github.io/2019/04/19/moment-常用方法/</id>
    <published>2019-04-19T08:44:32.000Z</published>
    <updated>2019-04-19T09:58:12.063Z</updated>
    
    <content type="html"><![CDATA[<h3 id="中文"><a href="#中文" class="headerlink" title="中文"></a>中文</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">moment.lang(&apos;zh-cn&apos;);</span><br></pre></td></tr></table></figure><h3 id="转其它格式"><a href="#转其它格式" class="headerlink" title="转其它格式"></a>转其它格式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">moment().toDate();      // Fri Apr 19 2019 16:52:18 GMT+0800 (中国标准时间)</span><br><span class="line">moment().valueOf();     // 1555663581967</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="格式化"><a href="#格式化" class="headerlink" title="格式化"></a>格式化</h3><table><thead><tr><th>格式</th><th>示例</th><th>说明</th></tr></thead><tbody><tr><td>YYYY</td><td>2019</td><td>4位年份</td></tr><tr><td>YY</td><td>19</td><td>2位年份</td></tr><tr><td>Q</td><td>2</td><td>季度</td></tr><tr><td>M</td><td>4</td><td>月份，不带前导零</td></tr><tr><td>MM</td><td>04</td><td>月份，带前导零，补齐2位</td></tr><tr><td>MMM</td><td>4月</td><td>月份，带单位</td></tr><tr><td>MMMM</td><td>四月</td><td>月份，带单位</td></tr><tr><td>D</td><td>19</td><td>日期，不带前导零</td></tr><tr><td>DD</td><td>19</td><td>日期，带前导零，补齐2位</td></tr><tr><td>Do</td><td>19日</td><td>日期，带单位</td></tr><tr><td>DDD</td><td>109</td><td>一年中的第几天，不带前导零</td></tr><tr><td>DDDD</td><td>109</td><td>一年中的第几天，带前导零，补齐3位</td></tr><tr><td>X</td><td>1555665167</td><td>时间戳，秒</td></tr><tr><td>x</td><td>1555665167319</td><td>时间戳，毫秒</td></tr><tr><td>w</td><td>16</td><td>一年中的第几周，不带前导零</td></tr><tr><td>ww</td><td>16</td><td>一年中的第几周，带前导零，补齐2位</td></tr><tr><td>ddd</td><td>周五</td><td>星期，缩写</td></tr><tr><td>dddd</td><td>星期五</td><td>星期</td></tr><tr><td>H</td><td>17</td><td>24小时制，不带前导零</td></tr><tr><td>HH</td><td>17</td><td>24小时制，带前导零，补齐2位</td></tr><tr><td>h</td><td>5</td><td>12小时制，不带前导零</td></tr><tr><td>hh</td><td>05</td><td>12小时制，带前导零，补齐2位</td></tr><tr><td>a</td><td>下午</td><td>上午下午</td></tr><tr><td>A</td><td>下午</td><td>上午下午</td></tr><tr><td>m</td><td>20</td><td>分钟，不带前导零</td></tr><tr><td>mm</td><td>20</td><td>分钟，带前导零，补齐2位</td></tr><tr><td>s</td><td>20</td><td>秒，不带前导零</td></tr><tr><td>ss</td><td>20</td><td>秒，带前导零，补齐2位</td></tr><tr><td>S</td><td>6</td><td>秒的前1位小数，即 600 毫秒</td></tr><tr><td>SS</td><td>63</td><td>秒的前2位小数，即 630 毫秒</td></tr><tr><td>SSS</td><td>637</td><td>秒的前3位小数，即 637 毫秒</td></tr></tbody></table><h3 id="格式化简写"><a href="#格式化简写" class="headerlink" title="格式化简写"></a>格式化简写</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">moment().format(&apos;L&apos;); -&gt; 2019/04/19</span><br><span class="line">moment().format(&apos;l&apos;); -&gt; 2019/4/19</span><br><span class="line">moment().format(&apos;LT&apos;); -&gt; 17:56</span><br><span class="line">moment().format(&apos;LTS&apos;); -&gt; 17:56:35</span><br><span class="line">moment().format(&apos;LL&apos;); -&gt; 2019年4月19日</span><br><span class="line">moment().format(&apos;ll&apos;); -&gt; 2019年4月19日</span><br><span class="line">moment().format(&apos;LLL&apos;); -&gt; 2019年4月19日下午5点50分</span><br><span class="line">moment().format(&apos;lll&apos;); -&gt; 2019年4月19日 17:50</span><br><span class="line">moment().format(&apos;LLLL&apos;); -&gt; 2019年4月19日星期五下午5点50分</span><br><span class="line">moment().format(&apos;llll&apos;); -&gt; 2019年4月19日星期五 17:50</span><br></pre></td></tr></table></figure><p>todo, 如何格式化为 “2019-04-19”?</p><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">moment();                           // Fri Apr 19 2019 16:52:18 GMT+0800 (中国标准时间)</span><br><span class="line">moment(&quot;2019-04-19&quot;);               // Fri Apr 19 2019 00:00:00 GMT+0800 (中国标准时间)</span><br><span class="line">moment(&quot;20190419&quot;);                 // Fri Apr 19 2019 00:00:00 GMT+0800 (中国标准时间)</span><br><span class="line">moment(&quot;2019-04-19 08:00:00&quot;);      // Fri Apr 19 2019 08:00:00 GMT+0800 (中国标准时间)</span><br><span class="line">moment(1555632000000);              // Fri Apr 19 2019 08:00:00 GMT+0800 (中国标准时间)</span><br></pre></td></tr></table></figure><h3 id="fromNow"><a href="#fromNow" class="headerlink" title="fromNow"></a>fromNow</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">moment(&quot;20190419&quot;).fromNow();       // 18 小时前</span><br><span class="line">moment(&quot;20100419&quot;).fromNow();       // 9 年前</span><br></pre></td></tr></table></figure><h3 id="设置时间"><a href="#设置时间" class="headerlink" title="设置时间"></a>设置时间</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">moment().startOf(&apos;year&apos;);           // 可选 year/month/quarter/week/day/hour/minute/second</span><br><span class="line">等价于</span><br><span class="line">moment().month(0).date(1).hours(0).minutes(0).seconds(0).milliseconds(0);</span><br><span class="line"></span><br><span class="line">moment().startOf(&apos;hour&apos;);</span><br><span class="line">等价于</span><br><span class="line">moment().minutes(0).seconds(0).milliseconds(0);</span><br><span class="line"></span><br><span class="line">moment().endOf(&quot;year&quot;);</span><br><span class="line">等价于</span><br><span class="line">moment().month(11).date(31).hours(23).minutes(59).seconds(59).milliseconds(999);</span><br></pre></td></tr></table></figure><p>更多请查看<a href="http://momentjs.cn/docs/" target="_blank" rel="noopener">官方文档</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;中文&quot;&gt;&lt;a href=&quot;#中文&quot; class=&quot;headerlink&quot; title=&quot;中文&quot;&gt;&lt;/a&gt;中文&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;moment.lang(&amp;apos;zh-cn&amp;apos;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;转其它格式&quot;&gt;&lt;a href=&quot;#转其它格式&quot; class=&quot;headerlink&quot; title=&quot;转其它格式&quot;&gt;&lt;/a&gt;转其它格式&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;moment().toDate();      // Fri Apr 19 2019 16:52:18 GMT+0800 (中国标准时间)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;moment().valueOf();     // 1555663581967&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="moment" scheme="https://frostbelt.github.io/tags/moment/"/>
    
  </entry>
  
</feed>
